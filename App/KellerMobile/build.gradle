import com.android.build.gradle.api.ApplicationVariant

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'io.fabric'
apply plugin: 'findbugs'

def verName = calcVersionName()
def verCode = calcVersionCode()
def sharedUserId = (sharedUserIdProp && sharedUserIdProp != "empty") ? sharedUserIdProp : ""

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId  appNameProp

        /*
        * ------------------------------------------------------------
        * These calculate the debug,CI,DEV,Beta version name and code.
        * For Release variants please use the gradle Project Prop overrides.
        * -PversionCodeProp=114 -PversionNameProp='5.64.6190.0'
        * ------------------------------------------------------------
        */
        versionName verName
        versionCode verCode
        minSdkVersion 14
        targetSdkVersion 28

        testApplicationId "com.jjkeller.kmb.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "KellerMobile")
        resValue "string", "shared_user_id", sharedUserId
    }

    signingConfigs {
        release {
            storeFile file("\\\\neenah-san1\\KTS-Dev\\Deployment\\jarKeystore\\KMBUI.keystore")
            storePassword "k1918A32796z"
            keyAlias "kmbui_key"
            keyPassword "k1918A32796z"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard.cfg'
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }

        dev {
            minifyEnabled false
            proguardFiles 'proguard.cfg'
            zipAlignEnabled true
            signingConfig signingConfigs.release
        }

        debug {
            resValue "string", "shared_user_id", (sharedUserId != "") ? sharedUserId : "com.jjkeller.kmb.shared.debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions{
        abortOnError false
    }


    flavorDimensions "version"
    productFlavors {
        // Both playStore and encompass need to share an App ID, as we need both of them to cleanly
        // replace the old shared "base" flavor.
        playStore {
            dimension "version"
        }
        encompass {
            dimension "version"
        }
        alk {
            applicationId "${appNameProp}.alk"
            dimension "version"
        }
    }

    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
        alk {
            assets.srcDirs = ['src/alk/assets']
            manifest.srcFile('src/alk/AndroidManifest.xml')
        }
        playStore { }
        encompass { }
    }

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.logging.enabled', 'true'
        }
    }

    // prevent the "superClassName is empty" error for classes not annotated as tests
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches your test class files
        include "**/*Tests.class" // whatever Ant pattern matches your test class files
    }
} // Android

android.applicationVariants.all { variant -> renameApk(variant) }

def renameApk(ApplicationVariant variant) {
    variant.outputs.each { output ->
        def baseName = project.archivesBaseName
        println "baseName: ${baseName}"

        println " Renaming per Flavor: ${variant.flavorName} BuildType: ${variant.buildType.name} Variant: ${variant.name}"

        // if it's a release build, the type is implicit, imo, so add it otherwise
        if (variant.buildType.name == 'release' || variant.buildType.name == 'dev') {
            if(variant.flavorName == 'encompass') {
                // add version name only
                baseName += "-${variant.mergedFlavor.versionName}"
            } else {
                // add version name and flavor
                baseName += "-${variant.flavorName}-${variant.mergedFlavor.versionName}"
            }
        }
        else {
            return
        }

        // if the variant will not be zipAligned, specify that
        if (!variant.buildType.zipAlignEnabled) {
            baseName += '-unaligned'
            println "Renaming Unaligned"
        }

        // set the output file
        // set the output file
        def relativeRootDir = output.packageApplication.outputDirectory.toPath()
                .relativize(rootDir.toPath()).toFile() // Absolute Path not allowed  in Android  3.1.0 ++
        println("Changing output for : ${output.outputFile.name} to ${baseName}")
        output.outputFileName = new File("$relativeRootDir/release", "${baseName}.apk")
    }
}

buildscript {
    repositories {
        mavenCentral()
        //maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases' }
    }
    dependencies {
        //classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.google.code.ksoap2-android:ksoap2-android:3.1.1'
    }
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/' }
}

configurations {
    playStoreReleaseImplementation
    playStoreDebugImplementation
    playStoreDevImplementation
    encompassReleaseImplementation
    encompassDebugImplementation
    encompassDevImplementation
    alkReleaseImplementation
    alkDebugImplementation
    alkDevImplementation
}

dependencies {
    playStoreReleaseImplementation project(path: ':KMBUI', configuration: 'playStoreRelease')
    playStoreDebugImplementation project(path: ':KMBUI', configuration: 'playStoreDebug')
    playStoreDevImplementation project(path: ':KMBUI', configuration: 'playStoreRelease')
    encompassReleaseImplementation project(path: ':KMBUI', configuration: 'encompassRelease')
    encompassDebugImplementation project(path: ':KMBUI', configuration: 'encompassDebug')
    encompassDevImplementation project(path: ':KMBUI', configuration: 'encompassRelease')
    alkReleaseImplementation project(path: ':KMBUI', configuration: 'alkRelease')
    alkDebugImplementation project(path: ':KMBUI', configuration: 'alkDebug')
    alkDevImplementation project(path: ':KMBUI', configuration: 'alkRelease')
    api 'com.google.code.ksoap2-android:ksoap2-android-assembly:2.4'
    implementation 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
    //   transitive = true
    //}
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.0'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.robolectric:robolectric:3.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:1.10.19'
} // dependencies

def calcVersionCode(){
    def versionCode

    // Use versionCodeProp if supplied. This enables different versioing in higher level environments
    if (versionCodeProp && versionCodeProp != "empty"){
        versionCode = Integer.parseInt(versionCodeProp)
    }
    else
    {
        // if built on jenkins ci, use jenkins build number:
        def buildNumber = System.getenv('BUILD_NUMBER')
        if (buildNumber && buildNumber.size() > 0) {
            versionCode = Integer.parseInt(buildNumber)
        }
        else {
            versionCode = calcVersionCodeWithDateTimestamp()
        }
    }

    println("VersionCode: ${versionCode}")
    return versionCode
}

def calcVersionCodeWithDateTimestamp(){
    def epochToYear2000 = 946684800
    def secondsPerDay = 86400
    def days = Math.round(((new Date().getTime() / 1000) - epochToYear2000) / secondsPerDay) - 1
    def time = new Date().format("HHmm")
    def versionCode = Integer.parseInt("${days}${time}")
    return versionCode
}

def calcVersionName(){
    if ( versionNameProp && versionNameProp != "empty"){
        println("versionName: ${versionNameProp}")
        return versionNameProp
    } else {
        // Year
        def yearDigit = Calendar.getInstance().get(Calendar.YEAR).toString().getAt(3)
        def month = Calendar.getInstance().get(Calendar.MONTH)

        // Quarter
        def quarter = 0
        if(month <= Calendar.MARCH)
            quarter = 1
        else if (month >= Calendar.APRIL && month <= Calendar.JUNE)
            quarter = 2
        else if (month >= Calendar.JULY && month <= Calendar.SEPTEMBER)
            quarter = 3
        else if (month >= Calendar.OCTOBER && month <= Calendar.DECEMBER)
            quarter = 4

        // Build
        def build = calcBuildNumberWithDateStamp()
        // Revision
        def revision = calcRevisionNumberWithTimeStamp()

        // Use Jenkins BUILD_NUMBER if available Revision = 0
        def buildNumber = System.getenv('BUILD_NUMBER')
        if (buildNumber && buildNumber.size() > 0) {
            build = Integer.parseInt(buildNumber)
            revision = 0
        }

        def major = "3"

        if( majorVersionProp && majorVersionProp != "empty"){
            major = Integer.parseInt(majorVersionProp)
        }

        def minor = "${yearDigit}${quarter}"

        def versionName = "${major}.${minor}.${build}.${revision}"

        println("versionName: ${versionName}")
        return versionName
    }
}

def calcBuildNumberWithDateStamp(){
    def epochToYear2000 = 946684800
    def secondsPerDay = 86400
    def days = Math.round(((new Date().getTime() / 1000) - epochToYear2000) / secondsPerDay) - 1
    return days.toString()
}

def calcRevisionNumberWithTimeStamp(){
    def time = new Date().format("HHmm")
    return time
}

// delete unaligned files
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File unaligned = output.packageApplication.outputFile;
            File aligned = output.outputFile
            if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                println "deleting " + unaligned.getName()
                unaligned.delete()
            }
        }
    }
}